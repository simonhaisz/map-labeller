{"version":3,"sources":["map-retrieval.ts","Region.tsx","SearchResults.tsx","Map.tsx","App.tsx","serviceWorker.ts","index.tsx"],"names":["retrieveMap","name","useTemplate","arguments","length","undefined","Promise","resolve","reject","publicUrl","concat","fetch","then","r","json","mapData","arrayBuffer","buffer","regions","imageData","btoa","Uint8Array","reduce","d","b","String","fromCharCode","toBase64","map","i","location","x","y","id","image","data","width","height","catch","error","saveMap","privateUrl","method","headers","Accept","Content-Type","body","JSON","stringify","res","err","convertNameToId","replace","toLowerCase","RegionComponent","props","_this","Object","classCallCheck","this","possibleConstructorReturn","getPrototypeOf","call","onDragStart","e","dataTransfer","setData","classes","selected","push","matching","style","left","top","label","split","w","react_default","a","createElement","key","className","join","draggable","Component","SearchResults","nextMatch","changeMatch","previousMatch","currentMatch","selectMatch","matches","state","selectedIndex","mod","nextIndex","setState","objectSpread","onClick","MapComponent","_search","onDragOver","preventDefault","onDrop","getData","currentRegions","toConsumableArray","region","find","pageX","pageY","onSearchChange","target","value","onSearchKeyPress","search","trim","filter","includes","forEach","onMatchClick","match","windowMiddleX","window","innerWidth","windowMiddleY","innerHeight","regionDiv","document","getElementById","Error","regionMiddleX","offsetWidth","regionMiddleY","offsetHeight","scrollTo","behavior","onSaveMapClick","editable","src_Region","mapStyle","backgroundImage","backgroundRepeat","type","onChange","onKeyPress","src_SearchResults_0","AppComponent","_this2","authoring","console","src_Map","Boolean","hostname","ReactDOM","render","src_App","navigator","serviceWorker","ready","registration","unregister"],"mappings":"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","file":"static/js/main.a090d4cc.chunk.js","sourcesContent":["const toBase64 = (buffer: ArrayBuffer): string => {\n    const base64 = btoa(new Uint8Array(buffer).reduce((d, b) => d + String.fromCharCode(b), \"\"));\n    return base64;\n};\n\nconst retrieveMap = (name: string, useTemplate: boolean = false): Promise<IMap> => {\n    return new Promise<IMap>((resolve, reject) => {\n        const publicUrl = `data/${name}-${useTemplate ? \"template\" : \"map\"}.json`;\n        const privateUrl = `http://localhost:8080/maps/${name}`;\n        fetch(publicUrl)\n            .then(r => r.json())\n            .then(mapData => {\n                fetch(`data/${name}-image.png`)\n                    .then(r => r.arrayBuffer())\n                    .then(buffer => {\n                        const imageData = toBase64(buffer);\n                        let regions: IRegion[];\n                        if (useTemplate) {\n                            regions = mapData.regions.map((r: string, i: number) => ({\n                                name: r,\n                                location: { x: 50, y: 50 + i * 50 }\n                            }));\n                        } else {\n                            regions = mapData.regions;\n                        }\n                        const map: IMap = {\n                            id: mapData.id,\n                            name: mapData.name,\n                            image: {\n                                data: imageData,\n                                width: mapData.width,\n                                height: mapData.height\n                            },\n                            regions\n                        };\n                        resolve(map);\n                    })\n                    .catch(error => reject(error))\n            \n            })\n            .catch(error => reject(error));\n    });\n};\n\nconst saveMap = (map: IMap): Promise<void> => {\n    return new Promise<void>((resolve, reject) => {\n        const privateUrl = `http://localhost:8080/maps/${map.id}`;\n        fetch(privateUrl, {\n            method: \"PATCH\",\n            headers: {\n                Accept: \"application/json\",\n                \"Content-Type\": \"application/json\"\n            },\n            body: JSON.stringify(map)\n        })\n        .then(res => resolve())\n        .catch(err => reject(err));\n    })\n}\n\nexport {\n    retrieveMap,\n    saveMap\n}","import React, { Component, DragEvent } from 'react';\nimport \"./Region.css\";\n\nexport const convertNameToId = (name: string): string => (\n    `region-${name.replace(/\\s/g, \"-\").toLowerCase()}`\n);\n\ntype Props = {\n    name: string;\n    location: ILocation;\n    matching: boolean;\n    selected: boolean;\n    draggable: boolean;\n}\nclass RegionComponent extends Component<Props> {\n    constructor(props: Props) {\n        super(props);\n    }\n\n    onDragStart = (e: DragEvent<HTMLDivElement>) => {\n        e.dataTransfer.setData(\"name\", this.props.name);\n    }\n\n    render() {\n        const classes: string[] = [\"Region\"];\n        if (this.props.selected) {\n            classes.push(\"Region-selected\");\n        } else if (this.props.matching) {\n            classes.push(\"Region-matching\");\n        }\n        const style = {\n            left: this.props.location.x,\n            top: this.props.location.y\n        };\n        const id = convertNameToId(this.props.name);\n        const label = this.props.name.split(\"\\n\").map((w, i) => (<div key={i}>{w}</div>));\n        return (\n            <div id={id} className={classes.join(\" \")} style={style} draggable={this.props.draggable} onDragStart={this.onDragStart}>{label}</div>\n        );\n    }\n}\n\nexport default RegionComponent;","import React, { Component } from \"react\";\nimport \"./SearchResults.css\";\n\ntype Props = {\n    matches: string[];\n    selectMatch: (match: string) => void;\n};\n\ntype State = {\n    selectedIndex: number;\n};\n\nclass SearchResults extends Component<Props, State> {\n\n    constructor(props: Props) {\n        super(props);\n        // if length is zero we'll ignore selectedIndex and render null\n        this.state = { selectedIndex: 0 };\n    }\n\n    nextMatch = () => {\n        this.changeMatch(1);\n    }\n\n    previousMatch = () => {\n        this.changeMatch(-1);\n    }\n\n    currentMatch = () => {\n        this.props.selectMatch(this.props.matches[this.state.selectedIndex]);\n    }\n\n    private changeMatch(mod: number) {\n        const nextIndex = (this.state.selectedIndex + mod) % this.props.matches.length;\n        this.setState(state => ({...state, selectedIndex: nextIndex}));\n        const nextMatch = this.props.matches[nextIndex];\n        this.props.selectMatch(nextMatch);\n    }\n\n    render() {\n        return (\n            <div className=\"SearchResults\">\n                <div className=\"SearchResults-previous-button\" onClick={this.previousMatch}>&lt;</div>\n                <div className=\"SearchResults-selected\" onClick={this.currentMatch}>{this.props.matches[this.state.selectedIndex]}</div>\n                <div className=\"SearchResults-next-button\" onClick={this.nextMatch}>&gt;</div>\n            </div>\n        );\n    }\n}\n\nexport default SearchResults;","import React, { Component, DragEvent, KeyboardEvent, MouseEvent, ChangeEvent } from \"react\";\nimport \"./Map.css\";\nimport RegionComponent, { convertNameToId } from \"./Region\";\nimport { saveMap } from \"./map-retrieval\";\nimport SearchResults from \"./SearchResults\";\n\ntype Props = {\n    map: IMap;\n    editable: boolean;\n};\ntype State = {\n    regions: IRegion[];\n    matches: string[];\n};\n\nclass MapComponent extends Component<Props, State> {\n    private _search = \"\";\n    constructor(props: Props) {\n        super(props);\n        this.state = {\n            regions: [...props.map.regions],\n            matches: []\n        };\n    }\n\n    onDragOver = (e: DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n    }\n\n    onDrop = (e: DragEvent<HTMLDivElement>) => {\n        e.preventDefault();\n        const name = e.dataTransfer.getData(\"name\");\n        const currentRegions = [...this.state.regions];\n        const region = currentRegions.find(r => r.name === name);\n        if (region) {\n            region.location = {\n                x: e.pageX,\n                y: e.pageY\n            };\n            this.setState({ regions: currentRegions });\n        }\n    }\n\n    onSearchChange = (e: ChangeEvent<HTMLInputElement>) => {\n        this._search = e.target.value;\n    }\n\n    onSearchKeyPress = (e: KeyboardEvent<HTMLInputElement>) => {\n        if (e.key !== \"Enter\") {\n            return;\n        }\n        const search = this._search.toLowerCase().trim();\n        let matches :string[];\n        if (search.length === 0) {\n            matches = [];\n        } else {\n            matches = this.state.regions.\n                filter(r => r.name.toLowerCase().includes(search))\n                .map(r => r.name);\n        }\n        const regions = [...this.state.regions];\n        regions.forEach(r => {\n            r.selected = false;\n            r.matching = matches.includes(r.name);\n        });\n        this.setState({ matches, regions });\n        if (matches.length > 0) {\n            this.onMatchClick(matches[0]);\n        }\n    }\n\n    onMatchClick = (match: string) => {\n        const region = this.state.regions.find(r => r.name === match);\n        const regions = [...this.state.regions];\n        regions.forEach(r => r.selected = r.name === match);\n        this.setState(state => ({...state, regions }));\n        if (region) {\n            const windowMiddleX = window.innerWidth / 2;\n            const windowMiddleY = window.innerHeight / 2;\n            const regionDiv = document.getElementById(convertNameToId(region.name));\n            if (!regionDiv) {\n                throw new Error(`Could not find region '${region.name}'`);\n            }\n            const regionMiddleX = regionDiv.offsetWidth / 2;\n            const regionMiddleY = regionDiv.offsetHeight / 2;\n            let x = region.location.x + regionMiddleX - windowMiddleX;\n            let y = region.location.y + regionMiddleY - windowMiddleY;\n            const options: ScrollToOptions = {\n                top: y,\n                left: x,\n                behavior: \"smooth\"\n            }\n            scrollTo(options);\n        }\n    }\n\n    onSaveMapClick = (e: MouseEvent<HTMLDivElement>) => {\n        const map: IMap = {...this.props.map, regions: [...this.state.regions]};\n        saveMap(map);\n    }\n\n    render() {\n        const editable = this.props.editable;\n        const name = this.props.map.name;\n        const regions = this.state.regions.map((r, i) => {\n            return (\n                <RegionComponent name={r.name} location={r.location} matching={!!r.matching} selected={!!r.selected} draggable={editable} key={i}/>\n            )\n        });\n        const mapStyle = {\n            backgroundImage: `url(data:image/png;base64,${this.props.map.image.data})`,\n            width: this.props.map.image.width,\n            height: this.props.map.image.height,\n            backgroundRepeat: \"no-repeat\"\n        };\n        return (\n            <div className=\"Map\" style={mapStyle} onDragOver={this.onDragOver} onDrop={this.onDrop}>\n                <div className=\"Map-header\">\n                    <div className=\"Map-name\">{name}</div>\n                    <div className=\"Map-search\">\n                        <div className=\"Map-search-label\">Search:</div>\n                        <input className=\"Map-search-input\" type=\"text\" onChange={this.onSearchChange} onKeyPress={this.onSearchKeyPress} />\n                    </div>\n                    {\n                        editable\n                        ?\n                        <div className=\"Map-log-button\" onClick={this.onSaveMapClick}>Save Map</div>\n                        :\n                        this.state.matches.length > 0 ?\n                            <SearchResults matches={this.state.matches} selectMatch={this.onMatchClick} />\n                            :\n                            null\n                    }\n                </div>\n                <div className=\"Map-regions\">{regions}</div>\n            </div>\n        );\n    }\n}\n\nexport default MapComponent;","import React, { Component } from 'react';\nimport { retrieveMap } from './map-retrieval';\nimport './App.css';\nimport MapComponent from './Map';\n\ntype Props = {\n  map:string;\n  authoring: boolean;\n};\ntype State = {\n  map?: IMap;\n}\nclass AppComponent extends Component<Props,State> {\n\n  constructor(props: Props) {\n    super(props);\n    this.state = {};\n  }\n  componentDidMount() {\n    retrieveMap(this.props.map, this.props.authoring)\n      .then(map => {\n        if (map) {\n          this.setState({\n            map\n          });\n        } else {\n          console.error(\"No map was returned\");\n        }\n      })\n      .catch(error => console.error(error));\n  }\n\n  render() {\n    if (!this.state.map) {\n      return (\n        <div className=\"App\">Loading map...</div>\n      )\n    }\n    const map = this.state.map;\n    const editable = this.props.authoring;\n    return (\n      <div className=\"App\">\n        <MapComponent map={map} editable={editable} />\n      </div>\n    );\n  }\n}\n\nexport default AppComponent;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read http://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\ntype Config = {\n  onSuccess?: (registration: ServiceWorkerRegistration) => void;\n  onUpdate?: (registration: ServiceWorkerRegistration) => void;\n};\n\nexport function register(config?: Config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(\n      (process as { env: { [key: string]: string } }).env.PUBLIC_URL,\n      window.location.href\n    );\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit http://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl: string, config?: Config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See http://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl: string, config?: Config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport AppComponent from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(<AppComponent map=\"middle-earth\" authoring={false} />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: http://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}